diff --git a/src/tools/rbd/ArgumentTypes.h b/src/tools/rbd/ArgumentTypes.h
index cc7c4813636..ac3e040e22a 100644
--- a/src/tools/rbd/ArgumentTypes.h
+++ b/src/tools/rbd/ArgumentTypes.h
@@ -55,6 +55,9 @@ static const std::string DEST_SNAPSHOT_NAME("dest-snap");
 static const std::string PATH("path");
 static const std::string FROM_SNAPSHOT_NAME("from-snap");
 static const std::string WHOLE_OBJECT("whole-object");
+static const std::string READ_OFFSET("read-offset");
+static const std::string READ_LENGTH("read-length");
+static const std::string MID_SNAP_PREFIX("mid-snap-prefix");
 
 // encryption arguments
 static const std::string ENCRYPTION_FORMAT("encryption-format");
diff --git a/src/tools/rbd/action/Export.cc b/src/tools/rbd/action/Export.cc
index ddcf0f2c30c..7ba5a4939fe 100644
--- a/src/tools/rbd/action/Export.cc
+++ b/src/tools/rbd/action/Export.cc
@@ -123,16 +123,27 @@ private:
 
 
 int do_export_diff_fd(librbd::Image& image, const char *fromsnapname,
-		   const char *endsnapname, bool whole_object,
-		   int fd, bool no_progress, int export_format)
+                      const char *endsnapname, const char *out_fromsnapname,
+                      const char* out_endsnapname, uint64_t offset, uint64_t length,
+                      bool whole_object, int fd, bool no_progress, int export_format)
 {
   int r;
   librbd::image_info_t info;
 
+  std::cerr << "do_export_diff(fromsnapname=" << (fromsnapname ? fromsnapname : "null") <<
+    " endsnapname=" << (endsnapname ? endsnapname : "null") <<
+    " out_fromsnapname=" << (out_fromsnapname ? out_fromsnapname : "null") <<
+    " out_endsnapname=" << (out_endsnapname ? out_endsnapname : "null") <<
+    " offset=" << offset << " length=" << length << ")" << std::endl;
+
   r = image.stat(info, sizeof(info));
   if (r < 0)
     return r;
 
+  if (offset == 0 && length == 0) {
+    length = info.size;
+  }
+
   {
     // header
     bufferlist bl;
@@ -143,10 +154,10 @@ int do_export_diff_fd(librbd::Image& image, const char *fromsnapname,
 
     __u8 tag;
     uint64_t len = 0;
-    if (fromsnapname) {
+    if (out_fromsnapname) {
       tag = RBD_DIFF_FROM_SNAP;
       encode(tag, bl);
-      std::string from(fromsnapname);
+      std::string from(out_fromsnapname);
       if (export_format == 2) {
 	len = from.length() + 4;
 	encode(len, bl);
@@ -154,10 +165,10 @@ int do_export_diff_fd(librbd::Image& image, const char *fromsnapname,
       encode(from, bl);
     }
 
-    if (endsnapname) {
+    if (out_endsnapname) {
       tag = RBD_DIFF_TO_SNAP;
       encode(tag, bl);
-      std::string to(endsnapname);
+      std::string to(out_endsnapname);
       if (export_format == 2) {
         len = to.length() + 4;
         encode(len, bl);
@@ -192,10 +203,10 @@ int do_export_diff_fd(librbd::Image& image, const char *fromsnapname,
       return r;
     }
   }
-  ExportDiffContext edc(&image, fd, info.size,
+  ExportDiffContext edc(&image, fd, length + offset,
                         g_conf().get_val<uint64_t>("rbd_concurrent_management_ops"),
                         no_progress, export_format);
-  r = image.diff_iterate2(fromsnapname, 0, info.size, true, whole_object,
+  r = image.diff_iterate2(fromsnapname, offset, length, true, whole_object,
                           &C_ExportDiff::export_diff_cb, (void *)&edc);
   if (r < 0) {
     goto out;
@@ -223,8 +234,9 @@ out:
 }
 
 int do_export_diff(librbd::Image& image, const char *fromsnapname,
-                const char *endsnapname, bool whole_object,
-                const char *path, bool no_progress)
+                   const char *endsnapname, const char *out_fromsnapname,
+                   const char* out_endsnapname, uint64_t offset, uint64_t length,
+                   bool whole_object, const char *path, bool no_progress)
 {
   int r;
   int fd;
@@ -236,7 +248,9 @@ int do_export_diff(librbd::Image& image, const char *fromsnapname,
   if (fd < 0)
     return -errno;
 
-  r = do_export_diff_fd(image, fromsnapname, endsnapname, whole_object, fd, no_progress, 1);
+  r = do_export_diff_fd(image, fromsnapname, endsnapname, out_fromsnapname,
+                        out_endsnapname, offset, length,
+                        whole_object, fd, no_progress, 1);
 
   if (fd != 1)
     close(fd);
@@ -260,10 +274,51 @@ void get_arguments_diff(po::options_description *positional,
   options->add_options()
     (at::FROM_SNAPSHOT_NAME.c_str(), po::value<std::string>(),
      "snapshot starting point")
-    (at::WHOLE_OBJECT.c_str(), po::bool_switch(), "compare whole object");
+    (at::WHOLE_OBJECT.c_str(), po::bool_switch(), "compare whole object")
+    (at::READ_OFFSET.c_str(), po::value<int64_t>(), "offset in bytes")
+    (at::READ_LENGTH.c_str(), po::value<int64_t>(), "length in bytes")
+    (at::MID_SNAP_PREFIX.c_str(), po::value<std::string>(),
+     "the prefix of snapshot name in output diff when specifying offset and length");
   at::add_no_progress_option(options);
 }
 
+int get_snapshot_name_for_offset_length(librbd::Image& image,
+                                        const std::string& mid_snap_prefix,
+                                        std::string* from_snap_name,
+                                        std::string* snap_name,
+                                        uint64_t* offset, uint64_t* length)
+{
+  int r;
+  librbd::image_info_t info;
+
+  r = image.stat(info, sizeof(info));
+  if (r < 0)
+    return r;
+
+  if (*offset >= info.size) {
+    std::cerr << "rbd: offset " << *offset << " exceeds image size "
+              << info.size << std::endl;
+    return -EINVAL;
+  }
+
+  if (*offset > 0) {
+    *from_snap_name = mid_snap_prefix + "-offset-" + std::to_string(*offset);
+  }
+
+  if (*length == 0) {
+    *length = info.size - *offset;
+    return 0;
+  }
+
+  if (*offset + *length < info.size) {
+    *snap_name = mid_snap_prefix + "-offset-" + std::to_string(*offset + *length);
+  } else {
+    *length = info.size - *offset;
+  }
+
+  return 0;
+}
+
 int execute_diff(const po::variables_map &vm,
                  const std::vector<std::string> &ceph_global_init_args) {
   size_t arg_index = 0;
@@ -290,6 +345,45 @@ int execute_diff(const po::variables_map &vm,
     from_snap_name = vm[at::FROM_SNAPSHOT_NAME].as<std::string>();
   }
 
+  if (vm.count(at::READ_OFFSET) != vm.count(at::READ_LENGTH)) {
+    std::cerr << "rbd: must specify both --read-offset and --read-length" << std::endl;
+    return -EINVAL;
+  }
+
+  uint64_t offset = 0;
+  if (vm.count(at::READ_OFFSET)) {
+    // When passing a negative value as an argument for uint64_t typed arg using boost::program_options,
+    // it is casted without causing an error, so check logic was necessary.
+    int64_t s_offset = vm[at::READ_OFFSET].as<int64_t>();
+    if (s_offset < 0) {
+      std::cerr << "rbd: offset must be greater than or equal to 0" << std::endl;
+      return -EINVAL;
+    }
+    offset = static_cast<uint64_t>(s_offset);
+  }
+
+  uint64_t length = 0;
+  if (vm.count(at::READ_LENGTH)) {
+    // When passing a negative value as an argument for uint64_t typed arg using boost::program_options,
+    // it is casted without causing an error, so check logic was necessary.
+    int64_t s_length = vm[at::READ_LENGTH].as<int64_t>();
+    if (s_length < 0) {
+      std::cerr << "rbd: length must be greater than or equal to 0" << std::endl;
+      return -EINVAL;
+    }
+    length = static_cast<uint64_t>(s_length);
+  }
+
+  std::string mid_snap_prefix("mid-snap");
+  if (vm.count(at::MID_SNAP_PREFIX)) {
+    mid_snap_prefix = vm[at::MID_SNAP_PREFIX].as<std::string>();
+    r = utils::validate_snapshot_name(at::ARGUMENT_MODIFIER_SOURCE, mid_snap_prefix,
+                                      utils::SNAPSHOT_PRESENCE_PERMITTED, utils::SPEC_VALIDATION_SNAP);
+    if (r < 0) {
+      return r;
+    }
+  }
+
   librados::Rados rados;
   librados::IoCtx io_ctx;
   librbd::Image image;
@@ -299,9 +393,28 @@ int execute_diff(const po::variables_map &vm,
     return r;
   }
 
+  std::string out_from_snap_name = from_snap_name;
+  std::string out_end_snap_name = snap_name;
+
+  if (offset != 0 || length != 0) {
+    if (snap_name.empty()) {
+      std::cerr << "rbd: must specify snapshot when specifying offset and length" << std::endl;
+      return -EINVAL;
+    }
+    r = get_snapshot_name_for_offset_length(image, mid_snap_prefix,
+                                            &out_from_snap_name, &out_end_snap_name,
+                                            &offset, &length);
+    if (r < 0) {
+      return r;
+    }
+  }
+
   r = do_export_diff(image,
                      from_snap_name.empty() ? nullptr : from_snap_name.c_str(),
                      snap_name.empty() ? nullptr : snap_name.c_str(),
+                     out_from_snap_name.empty() ? nullptr : out_from_snap_name.c_str(),
+                     out_end_snap_name.empty() ? nullptr : out_end_snap_name.c_str(),
+                     offset, length,
                      vm[at::WHOLE_OBJECT].as<bool>(), path.c_str(),
                      vm[at::NO_PROGRESS].as<bool>());
   if (r < 0) {
@@ -501,7 +614,8 @@ static int do_export_v2(librbd::Image& image, librbd::image_info_t &info, int fd
   const char *last_snap = NULL;
   for (size_t i = 0; i < snaps.size(); ++i) {
     utils::snap_set(image, snaps[i].name.c_str());
-    r = do_export_diff_fd(image, last_snap, snaps[i].name.c_str(), false, fd, true, 2);
+    r = do_export_diff_fd(image, last_snap, snaps[i].name.c_str(), last_snap,
+                          snaps[i].name.c_str(), 0, 0, false, fd, true, 2);
     if (r < 0) {
       return r;
     }
@@ -509,7 +623,8 @@ static int do_export_v2(librbd::Image& image, librbd::image_info_t &info, int fd
     last_snap = snaps[i].name.c_str();
   }
   utils::snap_set(image, std::string(""));
-  r = do_export_diff_fd(image, last_snap, nullptr, false, fd, true, 2);
+  r = do_export_diff_fd(image, last_snap, nullptr, last_snap,
+                        nullptr, 0, 0, false, fd, true, 2);
   if (r < 0) {
     return r;
   }
