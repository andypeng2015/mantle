// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ceph/command.go
//
// Generated by this command:
//
//	mockgen -source=internal/ceph/command.go -destination=internal/ceph/command_mock.go -package=ceph
//

// Package ceph is a generated GoMock package.
package ceph

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockcommand is a mock of command interface.
type Mockcommand struct {
	ctrl     *gomock.Controller
	recorder *MockcommandMockRecorder
}

// MockcommandMockRecorder is the mock recorder for Mockcommand.
type MockcommandMockRecorder struct {
	mock *Mockcommand
}

// NewMockcommand creates a new mock instance.
func NewMockcommand(ctrl *gomock.Controller) *Mockcommand {
	mock := &Mockcommand{ctrl: ctrl}
	mock.recorder = &MockcommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcommand) EXPECT() *MockcommandMockRecorder {
	return m.recorder
}

// execute mocks base method.
func (m *Mockcommand) execute(command ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range command {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "execute", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// execute indicates an expected call of execute.
func (mr *MockcommandMockRecorder) execute(command ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "execute", reflect.TypeOf((*Mockcommand)(nil).execute), command...)
}
