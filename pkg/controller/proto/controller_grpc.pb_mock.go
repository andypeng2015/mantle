// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/controller/proto/controller_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=pkg/controller/proto/controller_grpc.pb.go -destination=pkg/controller/proto/controller_grpc.pb_mock.go -package=proto
//

// Package proto is a generated GoMock package.
package proto

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMantleServiceClient is a mock of MantleServiceClient interface.
type MockMantleServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMantleServiceClientMockRecorder
}

// MockMantleServiceClientMockRecorder is the mock recorder for MockMantleServiceClient.
type MockMantleServiceClientMockRecorder struct {
	mock *MockMantleServiceClient
}

// NewMockMantleServiceClient creates a new mock instance.
func NewMockMantleServiceClient(ctrl *gomock.Controller) *MockMantleServiceClient {
	mock := &MockMantleServiceClient{ctrl: ctrl}
	mock.recorder = &MockMantleServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMantleServiceClient) EXPECT() *MockMantleServiceClientMockRecorder {
	return m.recorder
}

// CreateOrUpdateMantleBackup mocks base method.
func (m *MockMantleServiceClient) CreateOrUpdateMantleBackup(ctx context.Context, in *CreateOrUpdateMantleBackupRequest, opts ...grpc.CallOption) (*CreateOrUpdateMantleBackupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdateMantleBackup", varargs...)
	ret0, _ := ret[0].(*CreateOrUpdateMantleBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateMantleBackup indicates an expected call of CreateOrUpdateMantleBackup.
func (mr *MockMantleServiceClientMockRecorder) CreateOrUpdateMantleBackup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateMantleBackup", reflect.TypeOf((*MockMantleServiceClient)(nil).CreateOrUpdateMantleBackup), varargs...)
}

// CreateOrUpdatePVC mocks base method.
func (m *MockMantleServiceClient) CreateOrUpdatePVC(ctx context.Context, in *CreateOrUpdatePVCRequest, opts ...grpc.CallOption) (*CreateOrUpdatePVCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdatePVC", varargs...)
	ret0, _ := ret[0].(*CreateOrUpdatePVCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdatePVC indicates an expected call of CreateOrUpdatePVC.
func (mr *MockMantleServiceClientMockRecorder) CreateOrUpdatePVC(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdatePVC", reflect.TypeOf((*MockMantleServiceClient)(nil).CreateOrUpdatePVC), varargs...)
}

// ListMantleBackup mocks base method.
func (m *MockMantleServiceClient) ListMantleBackup(ctx context.Context, in *ListMantleBackupRequest, opts ...grpc.CallOption) (*ListMantleBackupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMantleBackup", varargs...)
	ret0, _ := ret[0].(*ListMantleBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMantleBackup indicates an expected call of ListMantleBackup.
func (mr *MockMantleServiceClientMockRecorder) ListMantleBackup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMantleBackup", reflect.TypeOf((*MockMantleServiceClient)(nil).ListMantleBackup), varargs...)
}

// MockMantleServiceServer is a mock of MantleServiceServer interface.
type MockMantleServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMantleServiceServerMockRecorder
}

// MockMantleServiceServerMockRecorder is the mock recorder for MockMantleServiceServer.
type MockMantleServiceServerMockRecorder struct {
	mock *MockMantleServiceServer
}

// NewMockMantleServiceServer creates a new mock instance.
func NewMockMantleServiceServer(ctrl *gomock.Controller) *MockMantleServiceServer {
	mock := &MockMantleServiceServer{ctrl: ctrl}
	mock.recorder = &MockMantleServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMantleServiceServer) EXPECT() *MockMantleServiceServerMockRecorder {
	return m.recorder
}

// CreateOrUpdateMantleBackup mocks base method.
func (m *MockMantleServiceServer) CreateOrUpdateMantleBackup(arg0 context.Context, arg1 *CreateOrUpdateMantleBackupRequest) (*CreateOrUpdateMantleBackupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateMantleBackup", arg0, arg1)
	ret0, _ := ret[0].(*CreateOrUpdateMantleBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateMantleBackup indicates an expected call of CreateOrUpdateMantleBackup.
func (mr *MockMantleServiceServerMockRecorder) CreateOrUpdateMantleBackup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateMantleBackup", reflect.TypeOf((*MockMantleServiceServer)(nil).CreateOrUpdateMantleBackup), arg0, arg1)
}

// CreateOrUpdatePVC mocks base method.
func (m *MockMantleServiceServer) CreateOrUpdatePVC(arg0 context.Context, arg1 *CreateOrUpdatePVCRequest) (*CreateOrUpdatePVCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdatePVC", arg0, arg1)
	ret0, _ := ret[0].(*CreateOrUpdatePVCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdatePVC indicates an expected call of CreateOrUpdatePVC.
func (mr *MockMantleServiceServerMockRecorder) CreateOrUpdatePVC(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdatePVC", reflect.TypeOf((*MockMantleServiceServer)(nil).CreateOrUpdatePVC), arg0, arg1)
}

// ListMantleBackup mocks base method.
func (m *MockMantleServiceServer) ListMantleBackup(arg0 context.Context, arg1 *ListMantleBackupRequest) (*ListMantleBackupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMantleBackup", arg0, arg1)
	ret0, _ := ret[0].(*ListMantleBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMantleBackup indicates an expected call of ListMantleBackup.
func (mr *MockMantleServiceServerMockRecorder) ListMantleBackup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMantleBackup", reflect.TypeOf((*MockMantleServiceServer)(nil).ListMantleBackup), arg0, arg1)
}

// mustEmbedUnimplementedMantleServiceServer mocks base method.
func (m *MockMantleServiceServer) mustEmbedUnimplementedMantleServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMantleServiceServer")
}

// mustEmbedUnimplementedMantleServiceServer indicates an expected call of mustEmbedUnimplementedMantleServiceServer.
func (mr *MockMantleServiceServerMockRecorder) mustEmbedUnimplementedMantleServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMantleServiceServer", reflect.TypeOf((*MockMantleServiceServer)(nil).mustEmbedUnimplementedMantleServiceServer))
}

// MockUnsafeMantleServiceServer is a mock of UnsafeMantleServiceServer interface.
type MockUnsafeMantleServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMantleServiceServerMockRecorder
}

// MockUnsafeMantleServiceServerMockRecorder is the mock recorder for MockUnsafeMantleServiceServer.
type MockUnsafeMantleServiceServerMockRecorder struct {
	mock *MockUnsafeMantleServiceServer
}

// NewMockUnsafeMantleServiceServer creates a new mock instance.
func NewMockUnsafeMantleServiceServer(ctrl *gomock.Controller) *MockUnsafeMantleServiceServer {
	mock := &MockUnsafeMantleServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMantleServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMantleServiceServer) EXPECT() *MockUnsafeMantleServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMantleServiceServer mocks base method.
func (m *MockUnsafeMantleServiceServer) mustEmbedUnimplementedMantleServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMantleServiceServer")
}

// mustEmbedUnimplementedMantleServiceServer indicates an expected call of mustEmbedUnimplementedMantleServiceServer.
func (mr *MockUnsafeMantleServiceServerMockRecorder) mustEmbedUnimplementedMantleServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMantleServiceServer", reflect.TypeOf((*MockUnsafeMantleServiceServer)(nil).mustEmbedUnimplementedMantleServiceServer))
}
